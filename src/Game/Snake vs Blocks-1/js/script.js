var sketchProc = function(processingInstance) {
  with (processingInstance) {
    size(600, 600); 
    frameRate(60);

    //0 = level, 1 = last level completed score, 2 = best score

    //var saveCode = [1, 0, 0]; //original save code if you need to reset
    var saveCode = [1, 0, 0];

    //if you've entered a save code previously and want to go back to the
    //start of the game again you will need to reset your save code


    var game;
    textFont(createFont("Verdana"));

    var levels = [
        {
            grid: [
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------",
    "--------------------"
    ]
        }, //home
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "------F-F-F-F-F---V-------------------------------",
    "--------------------------------------------------",
    "-------------------------BBBBB--------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------B---------P--F-F-F-F-F-F-F-F-F-F----------",
    "--------B-----------------------------------------",
    "--------B-----------------------------------------",
    "--------B-----------------------------------------",
    "--------B------------F-F-F-F-F-F-F-F-F-F----------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------B-----------",
    "-----------F-F-F-F-F-F-F-F-F-F--------B-----------",
    "--------------------------------------B-----------",
    "--------------------------------------B-----------",
    "--------------------------------------B-----------",
    "-----------F-F-F-F-F-F-F-F-F-F--------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "-------------BBBBB--------------------------------",
    "-------------------------------F-F-F-F-F----------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 1
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "----------------------------B---------------------",
    "--------------F-F-F-F-F-F-F-B-F-F-F-F-F-F-F-------",
    "----------------------------B---------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "---BBB--------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------------------------------",
    "--------------------------------------------------",
    "----F---------------------B-B-B-B-B-B-B-B-B-------",
    "--------------------------------------------------",
    "----F-----------------P---F-F-F-F-F-F-F-F-B-------",
    "--------------------------------------------------",
    "----F-----------------------------------F-B-------",
    "--------------------------------------------------",
    "----F-----------------------------------F-B-------",
    "--------------------------------------------------",
    "----F-----------------------------------F-B-------",
    "--------------------------------------------------",
    "----F-----------------------------------F-B-------",
    "--------------------------------------------------",
    "----F-----------------------------------F-B-------",
    "--------------------------------------------------",
    "----------------------------------------F-B-------",
    "--------------------------------------------------",
    "----------------------------------------F-B-------",
    "--------------------------------------------------",
    "----------------------------------------F-B-------",
    "-----------------B--------------------------------",
    "-------F-F-F-F-F-B-F-F-F-F-F-F--------------------",
    "-----------------B--------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 2
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "-----------P-F-F-F-F-F-F-F-F-F-F-F-F--------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------F-----------",
    "--------------------------------------------------",
    "---------F----------------------------F-----------",
    "--------------------------------------------------",
    "---------F----------------------------F-----------",
    "--------------------------------------------------",
    "---------F----------------------------F-------F---",
    "--------------------------------------------------",
    "---------F----B-B-B-B-B-B-B-B-B-B-B---F-------F---",
    "--------------------------------------------------",
    "---------F----------------------------F-------F---",
    "-----B------------------------------------B-------",
    "---------F----------------------------F-------F---",
    "-----B-----------F-F-F-F-F-F-F-F----------B-------",
    "---------F----------------------------F-------F---",
    "-----B------------------------------------B-------",
    "---------F----------------------------F-------F---",
    "-----B------------------------------------B-------",
    "---------F-------F-F-F-F-F-F-F-F------F-------F---",
    "-----B------------------------------------B-------",
    "---------F----------------------------F-------F---",
    "-----B------------------------------------B-------",
    "---------F----------------------------F-------F---",
    "-----B------------------------------------B-------",
    "---------F-------F-F-F-F-F-F-F-F------F-------F---",
    "-----B------------------------------------B-------",
    "---------F----------------------------F-------F---",
    "--------------------------------------------------",
    "---------F----------------------------F-------F---",
    "--------------------------------------------------",
    "--------------B-B-B-B-B-B-B-B-B-B-B---F-------F---",
    "--------------------------------------------------",
    "--------------------------------------F-------F---",
    "--------------------------------------------------",
    "--------------------------------------F-----------",
    "--------------------------------------------------",
    "---------F-F-F-F-F-F-F-F-F-F-F-F------F-----------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 3
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "---B-B-B-B-B--------------------------------------",
    "--------------------------------------------------",
    "---B-F-F-F-B-----------------B-B-B-B-B-B-B-B-B-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-F-F-F-F-F-F-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-B-B-B-B-B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B---------B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B---------B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-----B-B-B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-----B-F-F-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-B-B-B-B-B-B-B-B-B-F-B-----B-F-B-B-B--",
    "--------------------------------------------------",
    "---B-F-------------P---F-F-F-F-F-B-----B-F-B------",
    "--------------------------------------------------",
    "---B-F-------B-B-B-B-B-B-B-B-B-B-B-----B-F-B------",
    "--------------------------------------------------",
    "---B-F---------------------------------B-F-B------",
    "--------------------------------------------------",
    "---B-F-------B-B-B-B-B-B-B-B-B-B-B-----B-F-B------",
    "--------------------------------------------------",
    "---B-F---F-F-F-F-F-F-F-F-F-F-F-F-B-----B-F-B------",
    "--------------------------------------------------",
    "---B-F-B-F-B-B-B-B-B-B-B-B-B-B-F-B-----B-F-B------",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-----B-F-B-B-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-----B-F-F-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-----B-B-B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B---------B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B---------B-F-B--",
    "--------------------------------------------------",
    "---B-F-B-F-B-----------------B-F-B-B-B-B-B-B-F-B--",
    "--------------------------------------------------",
    "---B-F-F-F-B-----------------B-F-F-F-F-F-F-F-F-B--",
    "--------------------------------------------------",
    "---B-B-B-B-B-----------------B-B-B-B-B-B-B-B-B-B--",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 4
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "------------------B-B-B-B-B-B-B-B-B-B-------F-----",
    "--------------------------------------------------",
    "--F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-B-------F-----",
    "--------------------------------------------------",
    "--F---------------B-B-B-B-B-B-B-B-F-B-------F-----",
    "--------------------------------------------------",
    "--F-----------------------------B-F-B-------F-----",
    "--------------------------------------------------",
    "--F-----------------------------B-F-B-------F-----",
    "--------------------------------------------------",
    "--F-----------------------------B-F-B------BBB----",
    "--------------------------------------------------",
    "--F---------B-F-BBBBBBBBBB------B-F-B-------F-----",
    "------------B-------------------------------------",
    "--F---------B-F--------F-F------B-F-B-------F-----",
    "------------B-------------------------------------",
    "--F---------B-F-F----F-F-B------B-F-B-------F-----",
    "------------B------------B------------------------",
    "--F---------B------------B--------F---------F-----",
    "------------B------------B------------------------",
    "--F---------B------------B--------F---------F-----",
    "------------B---F----F-F-B------------------------",
    "--F----------------------B--------F---------F-----",
    "------------F-F-F------F-B------------------------",
    "--F----------------------B--------F---------F-----",
    "------------BBBBBBBBBB-F-B------------------------",
    "--F-------------------------------F---------F-----",
    "--------------------------------------------------",
    "--F-------------------------------F---------F-----",
    "--------------------------------------------------",
    "--F-------------------------------F---------F-----",
    "--------------------------------------------------",
    "--F----P----F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-----",
    "--------------------------------------------------",
    "----------------------------B---------------------",
    "------------F-F-F-F-F-F-F-F-B-F-F-F-F-F-F-F-F-----",
    "----------------------------B---------------------",
    "--------------------------------------------------",
    "------------F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-F-----",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 5
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "-----B-B-B---------------------B-B-B--------------",
    "--------------------------------------------------",
    "-----B-F-F---------------------F-F-B--------------",
    "--------------------------------------------------",
    "-----B-F-------------------------F-B--------F-----",
    "--------------------------------------------------",
    "--------------------------------------------F-----",
    "----------P--F-F-F-F-F-F-F-F----------------------",
    "--------------------------------------------F-----",
    "-------------------------------E------------------",
    "-----E--------------------------------------F-----",
    "--------------------------------------------------",
    "--------------------------------------------F-----",
    "--------------------------------------------------",
    "--------------------------------------------F-----",
    "--------------------------------------------------",
    "------------------B-B-B---------------------F-----",
    "------------------------------F-------------------",
    "------------------F-F-B---------------------F-----",
    "------------------------------F-------------------",
    "--------------------F-B---------------------------",
    "------------------------------F-------------------",
    "--------------------------------------------------",
    "----------E-------------------F-----E--F-B--------",
    "--------------------------------------------------",
    "------B-F---------------------F------F-F-B--------",
    "--------------------------------------------------",
    "------B-F-F-------------------F------B-B-B--------",
    "--------------------------------------------------",
    "------B-B-B-------------------F-------------------",
    "--------------------------------------------------",
    "------------------------------F-------------------",
    "----------F-F-F-F-F-F-F-F---------------E---------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "-----------E-----F-B------------------B-F---------",
    "--------------------------------------------------",
    "---------------F-F-B------------------B-F-F-------",
    "--------------------------------------------------",
    "---------------B-B-B------------------B-B-B-------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 6
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "----------------------------------B---------------",
    "----------------F------------------B--------------",
    "-----------------------P---F--------B-------F-----",
    "-------------------------------------B------------",
    "--------F-----------------------------B-----------",
    "---------------------------------------B----------",
    "------------------E---------------------B---------",
    "-----------------------------------------B--------",
    "---------------------------F--------------B-------",
    "-------------------------------------------B------",
    "----F---------------------------------------B-----",
    "---------BBBB---BBBB---------------F---------B----",
    "--------B----B-B----B-------------------------B---",
    "-------B------B------B----------------------------",
    "-------B-------------B----------------------------",
    "-------B-------------B------------------------F---",
    "-------B------F------B----------------------------",
    "-------B-------------B--------------E-------------",
    "--------B-----------B-----------------------------",
    "---------B---------B---------------------F--------",
    "---F------B-------B-------------------------------",
    "-----------B-----B--------------------------------",
    "------------B---B------------F--------------------",
    "-------------B-B----------------------------------",
    "--------------B------E----------------------------",
    "-----------------------------------------------F--",
    "--------------------------------------------------",
    "------------------------------BBBB---BBBB---------",
    "------------------F----------B----B-B----B--------",
    "--------F-------------------B------B------B-------",
    "----------------------------B-------------B-------",
    "----------------------------B-------------B-------",
    "---B------------------------B------F------B-------",
    "----B-----------------------B-------------B-------",
    "-----B-----------------------B-----------B--------",
    "------B-----------------------B---------B---------",
    "-------B-------E-------F-------B-------B----------",
    "--------B-----------------------B-----B-----------",
    "---------B-----------------------B---B------------",
    "----------B-----------------------B-B-------------",
    "-----------B-------F---------------B--------------",
    "-----F------B-------------------------------------",
    "-------------B---------------------------------F--",
    "--------------B-----------------------------------",
    "------------------------------F-------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 7
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "------------B-B-B-B-B-B-B-B-B-B-B-B-B-B-B---------",
    "--------------------------------------------------",
    "------------B-------------B-------------B---------",
    "------------V-------------V-------------V---------",
    "--------------------------------------------------",
    "------P-------F-F-F-F-F-F---F-F-F-F-F-F---F-F-----",
    "--------------------------------------------------",
    "--------------------------------------------F-----",
    "--------------------------------------------------",
    "------------B-------------B-------------B---F-----",
    "--------------------------------------------------",
    "------------B-B-B-B-B-B-B-B-B-B-B-B-B-B-B---F-----",
    "--------------------------------------------------",
    "------------B-F-F-F-F-F---B---F-F-F-F-F-F-F-F-----",
    "--------------------------------------------------",
    "------------B-F-------F---B---F---------B---------",
    "--------------------------------------------------",
    "------------B-F---F---F---B---F---------B---------",
    "--------------------------------------------------",
    "------------B-F---F---F---B---F---------B---------",
    "--------------------------------------------------",
    "------------B-F-F-F---F---B---F---------B---------",
    "--------------------------------------------------",
    "------------B-B-B-B-H-----B-H-----B-B-B-B---------",
    "--------------------------------------------------",
    "------------B-F-F-F-F-F---B---F-F-F-F-F-B---------",
    "--------------------------------------------------",
    "------------B-F-----------------------F-B---------",
    "--------------------------------------------------",
    "------------B-F-----------------------F-B---------",
    "--------------------------------------------------",
    "------------B-F-F-F-F-F-F-F-F-F-F-F-F-F-B---------",
    "--------------------------------------------------",
    "-------------B-B-B-B-B-B-B-B-B-B-B-B-B-B----------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------"
    ]
        }, //level 8
        {
            grid: [
    "----------------------------------------------------------------------",
    "----------------------------------------------------------------------",
    "-B-B-B-B-B-B-B-B-B---------B-B-B-B-B-B-B-B-B-B------B-B-B-B-B-B-B-B-B-",
    "----------------------------------------------------------------------",
    "---------B-------------------------B-----E------------------B---------",
    "-----------------------------------------------------------------F----",
    "----F----B--------------------F----B------------------------B---------",
    "-----------------------------------------------------------------F----",
    "----F----B--------B---B-------F----B---------B---B----------B---------",
    "-----------------B--F--B--------------------B--F--B--------------F----",
    "----F----B--------B---B-------F----B---------B---B----------B---------",
    "-----------------------------------------------------------------F----",
    "----F----B--------------------F----B------------------F-----B---------",
    "-----------------------------------------------------------------F----",
    "----F----B-----E--------------F----B------------------F-----B---------",
    "----------------------------------------------------------------------",
    "---------B-------------------------B------------------F-----B---------",
    "----------------------------------------------------------------------",
    "---------B-------------------------B------------------F-----B---------",
    "B--------------------------------------------------------------------B",
    "-B----------------F------B-B-B-B-B-B-B-B-B-B-B--------F-------------B-",
    "--B----------------------------------------------------------------B--",
    "---B--------------F------F-F-F-F-F-F-F-F-F-F-F--------------------B---",
    "----B------------------------------------------------------------B----",
    "-----B------------F------B-B-B-B-B-B-B-B-B-B-B-------E----------B-----",
    "------B--------------------------------------------------------B------",
    "-F-----B----------F----------------B--------------------------B-----F-",
    "--------B-------------F-F-F-F-F-F-----F-F-F-F-F-F------------B--------",
    "-F-------B--------F----------------B------------------------B-------F-",
    "----------B------------------------------------------------B----------",
    "-F---------B----------E------------B----------------------B---------F-",
    "------------B--------------------------------------------B------------",
    "-F-----------B-----------B-B-B-B-B-B-B-B-B-B-B----------B-----------F-",
    "--------------B----------------------------------------B--------------",
    "-F---------------------------------B--------------------------------F-",
    "----------------------------------------------------------------------",
    "-------------------------B-B-B-B---B---B-B-B-B------------------------",
    "----------------------------------------------------------------------",
    "-----------F-F-F-F-F---------------B------------P-----F-F-F-F-F-------",
    "----------------------------------------------------------------------"
    ]
        }, //level 9
        {
            grid: [
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--F---F-----F------F-------F-----F-------F----F---",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------BBBH-----B-B-BH----B-B-B-H----BBB-----F---",
    "--F-----B----------B---------B----------B---------",
    "--------B------E------------------------B---------",
    "--------------------------------------------------",
    "------------F--------P----------------------------",
    "--------B---------------------------F---B---------",
    "--------B------------F---------F--------B---------",
    "--F-----B-------------------------------B-----F---",
    "--------V-------------------------------V---------",
    "-----------------------------E--------------------",
    "-----------------------------------F--------------",
    "--------------F-------F-----------------------F---",
    "----------------------------F---------------------",
    "--F-----B-E-----------------------------B---------",
    "--------------------------------------------------",
    "--------B-------------------------F-----B---------",
    "--------V------------BBBBBBB------------V---------",
    "--F-----------------B-------B-----------------F---",
    "--------------F-----B-F-F-F-B---------------------",
    "--------------------B--F-F--B---------------------",
    "--------------------B-------B---------------------",
    "---------------------BBBBBBB------------------F---",
    "--------B-------------------------------B---------",
    "--F-------------------------------F---------------",
    "--------B-------------------------------B---------",
    "--------V-----F--------F----------------V---------",
    "--------------------------------------E-------F---",
    "-----------------F-------------F------------------",
    "--F-----------------------------------------------",
    "----------------------F-------------F-------------",
    "--------B-F-----------------------------B-----F---",
    "--------B----E--------------------------B---------",
    "-----E--B------------------F-----F------B---------",
    "--F--------------F--------------------------------",
    "----------------------------------------------F---",
    "--------B-------------------------------B---------",
    "--------B----------B---------B----------B---------",
    "--------BBBH-----B-B-BH----B-B-B-H----BBB------E--",
    "--F-----------------------------------------------",
    "--------------------------------------------------",
    "--------------------------------------------------",
    "--------F----------F--------F--------F--------F---",
    "--------------------------------------------------"
    ]
        }, //level 10
        {
            grid: [
    "--------------------------------------------------",
    "-------------------------------------------F------",
    "---------F---F------------------F-------F---------",
    "--B----------------B----------------F----------F--",
    "--------------------------F-----------------B-----",
    "------P-------------------------------------------",
    "-------------B-F--------E-----B-------------------",
    "---F----------------------------------B-----------",
    "------B------------------------------------F---B--",
    "-------------------F----B--------F----------------",
    "--------------------------------------------------",
    "---------F--------------------F-------E-----------",
    "--B-------------B---F-------F------F---------F----",
    "--------------------------------------------------",
    "----------E------------B-----------------B--F-----",
    "-------B-----------------------B----F-------------",
    "-----------------------------------F------------B-",
    "---F--------B--------F-----F-------------F--------",
    "---------------F----------------------------------",
    "--------------------------------F-----F-----------",
    "--------F----F------------------------------------",
    "------------------B-------B--------------B----F---",
    "---B--------------------------------B-------------",
    "--------------------------------------------------",
    "--------------------F----------F-------------F----",
    "--F-------B----F-------F---F-------F----F---------",
    "------------------------------------------E-------",
    "---------------------B----------------------------",
    "------F---------F-------E---------B---------------",
    "----------F----------------B--------------B-------",
    "------------F--F--B----------------------------B--",
    "-------B-----------------------F-------B----------",
    "--------------------------------------------------",
    "-------------------------F------------------------",
    "--F-------F-----B-----------B-----F------F--------",
    "--------------------F-----------------------------",
    "-------F-----F-----------------B--------B------F--",
    "----------------------B--F----------F-------------",
    "----B-----B-----E---------------------------------",
    "------------------B-------------------------F-----",
    "-----------------------------F----E------------B--",
    "---------------F-------------------------F--------",
    "---F--------B-------------------F---B-------------",
    "-------------------F-----------------------B------",
    "-------B-----------------B------------------------",
    "--------------B-----------------------------------",
    "-------------------F------------B-----F-----------",
    "-B---F-----------------F-----------------B--------",
    "-----------F--F------------F------F-----------B---",
    "--------------------------------------------------"
    ]
        }, //level 11
        {
    grid: [
    "----------------------------------------",
    "-F--------------FFFFF-----------------F-",
    "----------------------------------------",
    "---BB---BB--------B---E---BB--BB-BB-----",
    "------------------B---------------------",
    "------------------------B-----------B---",
    "---B--------------B-----B-----------B---",
    "---B----FFFFF-----B---------------------",
    "------------------------B--F--------B---",
    "------------------------B--F--B--F--B---",
    "---B---B-------------------F--B--F------",
    "-E-B---B-------B-B--BB-----F-----F--B---",
    "---------------------------F-----F--B---",
    "---------------------------------F------",
    "-------BB---------------------------B---",
    "---B---------FFFFFFFFFF-------------B---",
    "---B--------------------------E---------",
    "------------------------------------B---",
    "---B--------------------------------B---",
    "---B-----------------------BB-BB-BB-----",
    "-----BB-BB------------------------------",
    "------------B---------E----B------------",
    "------------B------B-------B------------",
    "---B-----------F---B--------------------",
    "---B-----------F-----------B---FFFFF----",
    "----------F-B--F-------F---B------------",
    "-------B--F-B--F---B---F----------------",
    "-------B--F----F---B---F---B------------",
    "----------F-B--F-------F---B------------",
    "---B------F-B--F-------F-----BB-BB-BB---",
    "---B-----------F---B---F----------------",
    "---------------F---B---F------------B---",
    "---------------F-------F---------F--B---",
    "------------B----------F---------F------",
    "------------B------B---F----BB---F--B---",
    "-----BB-BB---------B-------------F--B---",
    "---------------------------------F------",
    "------------------------------------B---",
    "-------------E---FFFFF--------------B---",
    "---------------------------BB-BB-BB-----",
    "-----BB---------------------------------",
    "---B-----F------------------------------",
    "---B-----F-------------------FFFFF------",
    "---------F----BB-BB-BB--B---------------",
    "---------F--------------B-----------E---",
    "---------F---B--------------------------",
    "-----B---F---B----------B-----BB--------",
    "-----B---F-----F--------B---------------",
    "--F------F---B-F--B---------------------",
    "--F------F---B-F--B-----B--FFFFFFFFFF---",
    "--F--B---F-----F--------B---------------",
    "--F--B-------B-F------------------------",
    "--F----------B-----------BB-BB-BB-BB----",
    "------------------E---------------------",
    "----------------------------------------",
    "-------------B--------FFFFFFFFFF--------",
    "-------------B--------------------------",
    "---BB-BB-----------------------------F--",
    "---------------BB--BB----------------F--",
    "--------------------------------BB---F--",
    "--------B----------------------------F--",
    "----E---B----------------B-----------F--",
    "---------------P-FFFFF---B--------------",
    "--------B------------------------E------",
    "--------B----------------B--------------",
    "---------------BB--------B--------------",
    "-----BB--------------------BB-BB-BB-----",
    "----------------------------------------",
    "-F----------FFFFFFFFFF----------------F-",
    "----------------------------------------"
    ]
        }, //level 12
        {
          grid: [
    "--------------------------------------------------",
    "-B-B-B-B-B-B--------B---------B-B-B-B-B-B-B-B-B-B-",
    "-------------------B-B----------------------------",
    "-B-F---F---F------B---B-------B---F---F---F---F-B-",
    "-------------------B-B----------------------------",
    "-B---B-B-B-B--------B---------B-F-B-B-B-B-B-B---B-",
    "--------------------------------------------------",
    "-B-F-B------------------------B---B---------B-F-B-",
    "--------------------------------------------------",
    "-B---B--------------------------------------B---B-",
    "--------------------------------------------------",
    "-B-F-B--------------------------------------B-F-B-",
    "-------------------V-B-B-B-B-B--------------------",
    "-B---B--------------------------------------------",
    "-------------------F---F---F-B--------------------",
    "----------------------------------E------B--------",
    "-------F-------------B-B-B---B----------B-B-----F-",
    "---------------------------------------B---B------",
    "-------------------------B-F-B-B-B-B----B-B-------",
    "-------B---------------------------------B--------",
    "------B-B----------------B---F---F-B------------F-",
    "--F--B---B--F-------------------------------------",
    "------B-B----------------B-B-B-B---B--------------",
    "-------B------------------------------------------",
    "-------------------------------B-F-B-B-B-B-B-B--F-",
    "--------------------------------------------------",
    "-------F-----------------------B---F---F---F-B----",
    "--------------------------------------------------",
    "-----------------------------V-B-B-B-B-B-B---B--F-",
    "--------------------------------------------------",
    "------------------------P------F-F-F-F-F-B-F-B----",
    "--------------------------------------------------",
    "---------------B-B-B-B-B-B-B---F---B---F-B---B--F-",
    "----------------------------------B-B-------------",
    "---------------B-F---F---F---B-F-B---B-F-B-F-B----",
    "--------E-------------------------B-B-------------",
    "---------------B---B-B-B-B-F-B-F---B---F-B---B--F-",
    "--------------------------------------------------",
    "---------------B-F---F---B---B-F-F-F-F-F-B-F-B----",
    "--------------------------------------------------",
    "---H-----------B-B-B-B-F-B-F-B-B-B-B-B-B-B---B--F-",
    "--------------------------------------------------",
    "---B-F-B------F--F---F---F-----F---F---F---F-B----",
    "--------------------------------------------------",
    "---B---B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B--F-",
    "--------------------------------------------------",
    "---B-F-------F-------F-------F--------------------",
    "--------------------------------------------------",
    "---B-----F-------F-------F------------------------",
    "--------------------------------------------------"
    ]
        }, //level 13
        {
            grid: [
    "--------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------",
    "-----------------------B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B--",
    "--------------------------------------------------------------------------------",
    "-----------------------B-----------------B-------------B---------------------B--",
    "---------------------------F----F------------F----------------------F-----------",
    "-----------V-B-B-B-B-B-B-----------------B--------F----B----E------------F---B--",
    "--------------------------------------------------------------------------------",
    "------P--F---F-F-F-F-F-B-----------------V-------------B-------F-------------B--",
    "--------------------------------------F-------F---------------------------------",
    "-----B-B-B---B-B-B---F-B-------F-----------------------B---------------------B--",
    "----------------------------------------------------F---------------------------",
    "-----B---------------F-B-------------------------------B-B-B-B-H-----B-H-----B--",
    "--------------------------------------------------------------------------------",
    "-----B---F----F------F-B-B-B-B-B-B-H-----B-B-B-B-H-----B-------------B-------B--",
    "--------------------------------------------------------------------------F-----",
    "-----B-----------------B-----------------B-------------B---F---F-----B-------B--",
    "-------------------------E---------------------------F-----------------F--------",
    "-----B---E-------------B------F-----F----B-----F-------B-------------B-------B--",
    "------------------F-----------------------------------------------E-------------",
    "-----B-----------------V-----------------B-------------V-------------B-------B--",
    "-------------F----------------------------------------------------------F-------",
    "-----B---------------------F----------F--B---------F-----------------B-------B--",
    "---------------------------------F------------E------------F-----F---------F----",
    "-----B-----------------------------------B---------------------------B-------B--",
    "--------------------------------------------------------------------------------",
    "-----B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B-B--",
    "--------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------",
    "--------------------------------------------------------------------------------"
    ]
        }, //level 14
        {
            grid: [
    "-----------B------------V------------B------------",
    "--------------------------------------------------",
    "-----------B-----F--------------F----B-------F----",
    "---------------------------F----------------------",
    "-----------B-------------------------B------------",
    "---P---F----------------B-------------------------",
    "-----------B--------E----------------B---F--------",
    "------------------------B--------F------------F---",
    "-----------B----F--------------------B------------",
    "------------------------B-------E-----------------",
    "-----------B------------------F------B------------",
    "---------------------F--B-------------------------",
    "-----------B-------------------------B------------",
    "---F--E-----------------B--------------BBBB-H-----",
    "-----------B-B-B-B-B-B-B-------------B------------",
    "------------------------B-------------------------",
    "-----------B--------------H-----BBBB-B------------",
    "------------------------B-----------------E---F---",
    "------F----B-------------------------B------------",
    "----------------F-------B-------F-----------------",
    "-----------B-------------------------B-----F------",
    "------------------------B-------------------------",
    "----F------B--------F----------------B------------",
    "------------------------B---F---------------------",
    "-----------B-------------------------B---F--------",
    "------------------------B-------------------------",
    "-----------B---F-----------------F---B------------",
    "------------------------B-------------------------",
    "--------F--B------E------------------B--------F---",
    "------------------------B-------------------------",
    "-----------B--------F-------F--------B------------",
    "--------E---------------B-------------------------",
    "-----F-----B-------------------------B-H-----BBBB-",
    "------------------------B-------------------------",
    "-----------B-H-----BBBB--------------B------------",
    "------------------------B-------------------------",
    "-----------B-------------B-B-B-B-B-B-B------------",
    "------------------------B-----------------F-------",
    "-----------B----F--------------------B------------",
    "------F-----------------B-------------------------",
    "-----------B---------------------F---B------------",
    "---F--------------------B---------------------E---",
    "-----------B-------------------------B------------",
    "-------------------F----B----F-----------------F--",
    "-----------V-------------------------V------------",
    "------------------------B-------------------------",
    "----------------------------E---------------------",
    "------F-------F---------B-------F---------F-------",
    "--------------------------------------------------",
    "------------------------B-------------------------"
    ]
        }  //level 15
    ];

    {
        //Key|Button stuff
        var clicked = false;
        var hover = false;
        var keys = [];
        keyPressed = function () {
            keys[keyCode] = true;
        };
        keyReleased = function () {
            keys[keyCode] = false;
        };
        mouseClicked = function () {
            clicked = true;
        };
    } //Keys/Mouse

    var Button = function (config) {
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.size = config.size || 150;
        this.content = config.content || "Home";
        this.page = config.page || "home";
        this.textSize = config.textSize || this.size / 5;
        this.borderColor = color(12, 31, 3, 20);
        this.backColor = color(29, 166, 179);
        this.textColor = color(245, 242, 242);
        this.backColorHover = color(20, 145, 156);
        this.textColorHover = color(20, 145, 156);
        this.growth = 0;

        this.draw = function () {
            pushStyle();
            textAlign(CENTER, CENTER);
            textSize(this.textSize + (this.growth * 0.1));
            noStroke();

            //shadow
            fill(20, 20, 20, 30);
            ellipse(this.x, this.y + this.size * 0.52, (this.size + this.growth) * 0.8, (this.size + this.growth) * 0.3);

            //circles
            if (dist(mouseX, mouseY, this.x, this.y) <= this.size / 2) { //hover
                hover = true;
                this.growth = constrain(this.growth + 0.5, 0, 10);
                if (clicked) {
                    if(this.content === "Sound") {
                        game.sound = !game.sound;
                    }
                    else if((game.page === "home" || game.page === "how") && (this.content === "Back" || this.content === "How")) {
                        game.transition.start(this.page);
                    }
                    else {
                        game.page = this.page;
                        game.reset();
                    }
                }

                fill(this.backColorHover);
                stroke(this.borderColor);
                ellipse(this.x, this.y, this.size + this.growth, this.size + this.growth);
                fill(this.textColorHover);
                switch(this.content) {
                    case "Play":
                        triangle(this.x + this.size*0.25, this.y, this.x - this.size*0.15, this.y - this.size*0.25, this.x - this.size*0.15, this.y + this.size*0.25);
                        break;
                    case "How":
                        pushStyle();
                            textSize(this.size*0.6);
                            text("?", this.x, this.y);
                        popStyle();
                        break;
                    case "Sound":
                        pushStyle();
                            noStroke();
                            fill(this.textColorHover);
                            triangle(this.x, this.y - this.size * 0.3, this.x, this.y + this.size * 0.3, this.x - this.size * 0.3, this.y);
                            rect(this.x - this.size * 0.3, this.y - this.size * 0.1, this.size * 0.3, this.size * 0.2);
                            if(game.sound) {
                                noFill();
                                stroke(this.textColorHover);
                                strokeWeight(this.size/20);
                                arc(this.x + this.size * 0.1, this.y, this.size * 0.2, this.size * 0.2, radians(-91), radians(90));
                                arc(this.x + this.size * 0.1, this.y, this.size * 0.4, this.size * 0.4, radians(-81), radians(80));
                            }
                            else {
                                noFill();
                                stroke(this.textColorHover);
                                strokeWeight(this.size/20);
                                line(this.x + this.size * 0.1, this.y - this.size * 0.1, this.x + this.size * 0.25, this.y + this.size * 0.1);
                                line(this.x + this.size * 0.1, this.y + this.size * 0.1, this.x + this.size * 0.25, this.y - this.size * 0.1);
                            }
                        popStyle();
                        break;
                    case "Story":
                        pushStyle();
                            noFill();
                            stroke(this.textColorHover);
                            strokeWeight(4);
                            line(this.x-this.size*0.23, this.y-this.size*0.2, this.x+this.size*0.23, this.y-this.size*0.2);
                            line(this.x-this.size*0.23, this.y, this.x+this.size*0.23, this.y);
                            line(this.x-this.size*0.23, this.y+this.size*0.2, this.x+this.size*0.23, this.y+this.size*0.2);
                        popStyle();
                        break;
                    case "Themes":
                        arc(this.x, this.y, this.size + this.growth, this.size + this.growth, 271, 450);
                        break;
                    case "Back":
                        pushStyle();
                        beginShape();
                            vertex(this.x+this.size*0.25, this.y); //1
                            vertex(this.x+this.size*0.25, this.y+this.size*0.25); //2
                            vertex(this.x+this.size*0.07, this.y+this.size*0.25); //3
                            vertex(this.x+this.size*0.07, this.y+this.size*0.12); //4
                            vertex(this.x-this.size*0.07, this.y+this.size*0.12); //5
                            vertex(this.x-this.size*0.07, this.y+this.size*0.25); //6
                            vertex(this.x-this.size*0.25, this.y+this.size*0.25); //7
                            vertex(this.x-this.size*0.25, this.y); //8
                            vertex(this.x, this.y-this.size*0.2); //9
                            vertex(this.x+this.size*0.25, this.y); //10
                        endShape();
                        noFill();
                        stroke(this.textColorHover);
                        strokeWeight(this.size*0.05);
                        line(this.x-this.size*0.27, this.y-this.size*0.05, this.x, this.y-this.size*0.27);
                        line(this.x+this.size*0.27, this.y-this.size*0.05, this.x, this.y-this.size*0.27);
                        line(this.x+this.size*0.15, this.y-this.size*0.19, this.x+this.size*0.15, this.y-this.size*0.25);
                        popStyle();
                        break;
                    case "Leaderboard":
                        pushStyle();
                            noFill();
                            stroke(this.textColorHover);
                            strokeWeight(5);
                            line(this.x-this.size*0.22, this.y+this.size*0.05, this.x-this.size*0.05, this.y+this.size*0.23);
                            line(this.x-this.size*0.05, this.y+this.size*0.23, this.x+this.size*0.25, this.y-this.size*0.2);
                        popStyle();
                        break;
                    case "Replay":
                        pushStyle();
                            noFill();
                            stroke(this.textColorHover);
                            strokeWeight(5);
                            pushMatrix();
                                translate(this.x, this.y);
                                rotate(game.timer * 5);
                                arc(0, 0, this.size * 0.6, this.size * 0.6, radians(1), radians(275));
                                noStroke();
                                fill(this.textColorHover);
                                translate(this.size * 0.30, -this.size * 0.18);
                                rotate(radians(-70));
                                triangle(0, -this.size * 0.1, -this.size * 0.14, -this.size * 0.3, this.size * 0.14, -this.size * 0.3);
                            popMatrix();
                        popStyle();
                        break;
                    default:
                        text(this.content, this.x, this.y);
                }
            }
            else { //not hover
                this.growth = constrain(this.growth - 0.5, 0, 10);
                fill(this.backColor);
                strokeWeight(2);
                stroke(this.borderColor, 100);
                ellipse(this.x, this.y, this.size + this.growth, this.size + this.growth);
                fill(this.textColor);
                switch(this.content) {
                    case "Play":
                        triangle(this.x + this.size*0.25, this.y, this.x - this.size*0.15, this.y - this.size*0.25, this.x - this.size*0.15, this.y + this.size*0.25);
                        break;
                    case "How":
                        pushStyle();
                            textSize(this.size*0.6);
                            text("?", this.x, this.y);
                        popStyle();
                        break;
                    case "Sound":
                        pushStyle();
                            noStroke();
                            fill(this.textColor);
                            triangle(this.x, this.y - this.size * 0.3, this.x, this.y + this.size * 0.3, this.x - this.size * 0.3, this.y);
                            rect(this.x - this.size * 0.3, this.y - this.size * 0.1, this.size * 0.3, this.size * 0.2);
                            if(game.sound) {
                                noFill();
                                stroke(this.textColor);
                                strokeWeight(this.size/20);
                                arc(this.x + this.size * 0.1, this.y, this.size * 0.2, this.size * 0.2, radians(-91), radians(90));
                                arc(this.x + this.size * 0.1, this.y, this.size * 0.4, this.size * 0.4, radians(-81), radians(80));
                            }
                            else {
                                noFill();
                                stroke(this.textColor);
                                strokeWeight(this.size/20);
                                line(this.x + this.size * 0.1, this.y - this.size * 0.1, this.x + this.size * 0.25, this.y + this.size * 0.1);
                                line(this.x + this.size * 0.1, this.y + this.size * 0.1, this.x + this.size * 0.25, this.y - this.size * 0.1);
                            }
                        popStyle();
                        break;
                    case "Story":
                        pushStyle();
                            noFill();
                            stroke(this.textColor);
                            strokeWeight(4);
                            line(this.x-this.size*0.23, this.y-this.size*0.2, this.x+this.size*0.23, this.y-this.size*0.2);
                            line(this.x-this.size*0.23, this.y, this.x+this.size*0.23, this.y);
                            line(this.x-this.size*0.23, this.y+this.size*0.2, this.x+this.size*0.23, this.y+this.size*0.2);
                        popStyle();
                        break;
                    case "Themes":
                        arc(this.x, this.y, this.size, this.size, 271, 450);
                        break;
                    case "Back":
                        pushStyle();
                        beginShape();
                            vertex(this.x+this.size*0.25, this.y); //1
                            vertex(this.x+this.size*0.25, this.y+this.size*0.25); //2
                            vertex(this.x+this.size*0.07, this.y+this.size*0.25); //3
                            vertex(this.x+this.size*0.07, this.y+this.size*0.12); //4
                            vertex(this.x-this.size*0.07, this.y+this.size*0.12); //5
                            vertex(this.x-this.size*0.07, this.y+this.size*0.25); //6
                            vertex(this.x-this.size*0.25, this.y+this.size*0.25); //7
                            vertex(this.x-this.size*0.25, this.y); //8
                            vertex(this.x, this.y-this.size*0.2); //9
                            vertex(this.x+this.size*0.25, this.y); //10
                        endShape();
                        noFill();
                        stroke(this.textColor);
                        strokeWeight(this.size*0.05);
                        line(this.x-this.size*0.27, this.y-this.size*0.05, this.x, this.y-this.size*0.27);
                        line(this.x+this.size*0.27, this.y-this.size*0.05, this.x, this.y-this.size*0.27);
                        line(this.x+this.size*0.15, this.y-this.size*0.19, this.x+this.size*0.15, this.y-this.size*0.25);
                        popStyle();
                        break;
                    case "Leaderboard":
                        pushStyle();
                            noFill();
                            stroke(this.textColor);
                            strokeWeight(5);
                            line(this.x-this.size*0.22, this.y+this.size*0.05, this.x-this.size*0.05, this.y+this.size*0.23);
                            line(this.x-this.size*0.05, this.y+this.size*0.23, this.x+this.size*0.25, this.y-this.size*0.2);
                        popStyle();
                        break;
                    case "Replay":
                        pushStyle();
                            noFill();
                            stroke(this.textColor);
                            strokeWeight(5);
                            pushMatrix();
                                translate(this.x, this.y);
                                rotate(radians(sin(game.timer * 5) * 20));
                                arc(0, 0, this.size * 0.6, this.size * 0.6, radians(1), radians(275));
                                noStroke();
                                fill(this.textColor);
                                translate(this.size * 0.30, -this.size * 0.18);
                                rotate(radians(-70));
                                triangle(0, -this.size * 0.1, -this.size * 0.14, -this.size * 0.3, this.size * 0.14, -this.size * 0.3);
                            popMatrix();
                        popStyle();
                        break;
                    default:
                        text(this.content, this.x, this.y);
                }
            }

            popStyle();
        };
    };
    var Explosion = function (config) {
        this.used = false;
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.xspeed = random(-2, 2);
        this.yspeed = random(-2, 2);
        this.size = config.size || 15;
        this.cornerRadius = config.cornerRadius || 0;
        this.angle = 0;
        this.anglespeed = config.anglespeed || random(-5, 5);
        this.timeToLive = 255;
        this.timeToLiveSpeed = random(3, 6);
        this.backColor = config.backColor || color(random(255), random(255), random(255));

        //handle the movement of the explosion
        this.update = function () {
            this.x+= this.xspeed;
            this.y+= this.yspeed;

            this.angle += this.anglespeed;
            this.timeToLive-= this.timeToLiveSpeed;
            if(this.timeToLive <= 0) {
                this.used = false;
            }
        };

        //draw the explosion on the screen
        this.draw = function () {
            pushMatrix();
                translate(this.x, this.y);
                rotate(this.angle);
                noStroke();
                fill(this.backColor, this.timeToLive);
                rect(-this.size / 2, -this.size / 2, this.size, this.size, this.cornerRadius);
            popMatrix();
        };

        this.run = function () {
            this.update();
            this.draw();
        };
    };
    var Segment = function(config) {
        this.used = false;
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.vx = config.vx || 0;
        this.vy = config.vy || 0;
        this.size = config.size || 20;
        this.w = this.size;
        this.h = this.size;
    };
    var Snake = function(config){
        this.x = config.x;
        this.y = config.y;
        this.spawn = {
            x: this.x,
            y: this.y
        };
        this.go = false;
        this.vx = 1;
        this.vy = 0;
        this.size = config.size;
        this.w = this.size;
        this.h = this.size;
        this.speed = this.size * 0.17; //0.2
        this.segmentsRepository = [];
        this.segments = [];
        this.addSegment = false;
        this.headAngle = 0;
        this.tailAngle = 0;
        this.alive = true;
        this.snakeColor = config.snakeColor;
        this.colors = [
                [ //red
                    color(181, 46, 36),
                    color(161, 44, 26),
                    color(125, 26, 19)
                ],
                [ //green
                    color(27, 186, 35),
                    color(24, 165, 30),
                    color(17, 126, 22)
                ],
                [ //blue
                    color(30, 149, 179),
                    color(25, 127, 153),
                    color(17, 97, 117)
                ],
                [ //pink
                    color(204, 51, 204),
                    color(179, 34, 179),
                    color(150, 27, 150)
                ]
            ];

        this.getSegment = function(config) {
            for(var i = 0; i < this.segmentsRepository.length; i++) {
                if(this.segmentsRepository[i].used === false) {
                    this.segmentsRepository[i].x = config.x;
                    this.segmentsRepository[i].y = config.y;
                    this.segmentsRepository[i].vx = config.vx;
                    this.segmentsRepository[i].vy = config.vy;
                    this.segmentsRepository[i].size = config.size;
                    this.segmentsRepository[i].used = true;
                    return this.segmentsRepository[i];
                }
            }

            //if no segment found in the repository then return a new segment object
            var s = new Segment({
                used: true,
                x: config.x, 
                y: config.y, 
                vx: config.vx, 
                vy: config.vy,
                size: config.size
            });

            this.segmentsRepository.push(s);
            return s;
        };
        this.setup = function() {
            //initialize blocks for reuse
            for(var i = 0; i < 120; i++)
            {
                this.segmentsRepository.push(
                    new Segment(
                    {
                        size: this.size
                    })
                );
            }
        };
        this.setup();
        this.init = function() {
            this.go = false;
            this.alive = true;
            this.vx = 1;
            this.vy = 0;
            this.segments.length = 0;

            for(var i = 0; i < this.segmentsRepository.length; i++) {
                this.segmentsRepository[i].used = false;
            }

            for(var i = 0; i < 4 * 4; i++)
            {
                this.segments.push(
                    this.getSegment(
                    {
                        x: this.x - (i * this.speed), 
                        y: this.y, 
                        vx: this.vx, 
                        vy: this.vy,
                        size: this.size
                    })
                );
            }
        };
        this.move = function() {
            if(this.alive) {
                if(keys[LEFT] || keys[65]) { //Left arrow or A
                     this.vx = -1;
                     this.vy = 0;
                     this.go = true;
                }
                if(keys[RIGHT] || keys[68]) { //Right arrow or D
                     this.vx = 1;
                     this.vy = 0;
                     this.go = true;
                }
                if((keys[UP] || keys[87])) { //Up arrow or W
                     this.vy = -1;
                     this.vx = 0;
                     this.go = true;
                }
                if(keys[DOWN] || keys[83]) { //Down arrow or S
                     this.vy = 1;
                     this.vx = 0;
                     this.go = true;
                }
            }
        };
        this.update = function(){
            if(this.go)
            {
                var tp = new Segment(0, 0); //tail point
                if(this.addSegment)
                {
                    var tail = this.segments[this.segments.length - 1];
                    tp.x = tail.x;
                    tp.y = tail.y;
                    tp.vx = tail.vx;
                    tp.vy = tail.vy;
                }

                for(var i = this.segments.length - 1; i > 0; i--)
                {
                    this.segments[i].vx = this.segments[i-1].vx;
                    this.segments[i].vy = this.segments[i-1].vy;
                    this.segments[i].x += this.segments[i-1].vx * this.speed;
                    this.segments[i].y += this.segments[i-1].vy * this.speed;
                }

                if(this.addSegment)
                {
                    this.segments.push(new Segment(
                    {
                        x: tp.x,
                        y: tp.y, 
                        vx: tp.vx, 
                        vy: tp.vy,
                        size: this.size

                    }));
                    this.addSegment = false;
                }

                this.segments[0].x += this.vx * this.speed;
                this.segments[0].y += this.vy * this.speed;
                this.segments[0].vx = this.vx;
                this.segments[0].vy = this.vy;
            }
        };
        this.draw = function(){
            noStroke();

            //body
            for(var i = this.segments.length - 1; i > 0; i--)
            {
                fill(this.colors[this.snakeColor > -1 ? this.snakeColor : game.snake.snakeColor][~~(i * 1/3) % 3]);
                var p = this.segments[i];
                rect(p.x, p.y, this.size, this.size, 3);
            }

            //head
            fill(this.colors[this.snakeColor > -1 ? this.snakeColor : game.snake.snakeColor][2]);
            var head = this.segments[0];

            pushMatrix();
                translate(head.x, head.y);

                if(head.vx === 1) {this.headAngle = 0;}
                else if(head.vy === 1) {this.headAngle = 90;}
                else if(head.vx === -1) {this.headAngle = 180;}
                else if(head.vy === -1) {this.headAngle = 270;}

                translate(head.size / 2, head.size / 2);
                rotate(radians(this.headAngle));
                translate(-head.size / 2, -head.size / 2);
                rect(0, 0, this.size, this.size, 5);

                //eyes
                fill(255);
                ellipse(this.size * 0.4, this.size * 0.15, this.size-this.size/3, this.size-this.size/3);
                ellipse(this.size * 0.4, this.size * 0.85, this.size-this.size/3, this.size-this.size/3);

                fill(0);
                ellipse(this.size * 0.5, this.size * 0.15, this.size/4, this.size/4);
                ellipse(this.size * 0.5, this.size * 0.85, this.size/4, this.size/4);
            popMatrix();

            //tail
            fill(this.colors[this.snakeColor > -1 ? this.snakeColor : game.snake.snakeColor][~~(((this.segments.length )* 1/3) + 1) % 3]);
            var tail = this.segments[this.segments.length-1];
            pushMatrix();
                translate(tail.x, tail.y);

                if(tail.vx === 1) {this.tailAngle = 0;}
                else if(tail.vy === 1) {this.tailAngle = 90;}
                else if(tail.vx === -1) {this.tailAngle = 180;}
                else if(tail.vy === -1) {this.tailAngle = 270;}

                translate(head.size / 2, head.size / 2);
                rotate(radians(this.tailAngle));
                translate(-head.size / 2, -head.size / 2);
                triangle(   -this.size*0.75, this.size * 0.5, 
                            1, 0,
                            1, this.size);
            popMatrix();
        };
        this.run = function(){
            this.move();
            this.update();
            this.draw();
        };
    };
    var SnakeButton = function(config) {
        this.x = config.x;
        this.y = config.y;
        this.w = config.w;
        this.h = config.h;
        this.index = config.index;
        this.snake = new Snake({
            x: this.x + 75,
            y: this.y,
            size: this.h,
            snakeColor: this.index
        });
        this.snake.init();

        this.over = function() {
            return  mouseX > this.x &&
                    mouseX < this.x + this.w &&
                    mouseY > this.y &&
                    mouseY < this.y + this.h;
        };
        this.run = function() {
            this.snake.draw();
            if(this.index === game.snake.snakeColor) {
                fill(game.themes[0].colors.textColor);
                rect(this.x, this.y + this.h * 1.5, this.w, 4);
            }
            if(this.over()) {
                hover = true;
                fill(game.themes[0].colors.textColor, 100);
                rect(this.x, this.y + this.h * 1.5, this.w, 4);
                if(clicked) {
                    game.snake.snakeColor = this.index;
                    game.snakeHow.snakeColor = this.index;
                    game.resetButtons();
                }
            }
        };
    };
    var Block = function(config) {
        this.used = false;
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.w = config.w;
        this.h = config.h;
        this.backColor = config.backColor || color(112, 112, 112);

        this.draw = function() {
            image(game.themes[game.level].blockImage, this.x, this.y, this.w, this.h);
        };
        this.run = function() {
            this.draw();  
        };
    };
    var Lazer = function (config) {
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.w = config.w;
        this.h = config.h;
        this.backColor = config.backColor || color(125);
        this.type = config.type || "";
        this.on = true;
        this.delay = config.delay || 240; //4 seconds
        this.end = {
            x: 0,
            y: 0,
            w: this.w,
            h: this.h
        };
        this.beam = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
        this.init = function() {
            if(this.type === "H") {
                //end
                this.end.x = this.x + this.w * 4;
                this.end.y = this.y;
                //beam
                this.beam.x = this.x + this.w;
                this.beam.y = this.y + this.h * 0.25;
                this.beam.w = this.w * 3;
                this.beam.h = this.h * 0.5;
            }
            else if(this.type === "V"){
                //end
                this.end.x = this.x;
                this.end.y = this.y + this.h * 4;
                //beam
                this.beam.x = this.x + this.w * 0.25;
                this.beam.y = this.y + this.h;
                this.beam.w = this.w * 0.5;
                this.beam.h = this.h * 3;
            }
        };
        this.init();

        this.draw = function () {
            //start
            image(game.themes[game.level].lazerImage, this.x, this.y, this.w, this.h);
            //end
            image(game.themes[game.level].lazerImage, this.end.x, this.end.y, this.w, this.h);

            if(this.on) { //beam
                noStroke();
                fill(this.backColor, random(50, 200));
                rect(this.beam.x, this.beam.y, this.beam.w, this.beam.h);
            }
        };
        this.update = function() {
            if(frameCount % this.delay === 0) {
                this.on = !this.on;
            }
        };
        this.run = function () {
            this.update();
            this.draw();
        };
    };
    var Bot = function(config) {
        this.used = false;
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.vx = config.vx || 0;
        this.vy = config.vy || 0;
        this.w = config.w;
        this.h = config.h;
        this.speed = config.speed || 2;
        this.backColor = config.backColor || color(237, 213, 35);

        this.resetDirection = function() {
            this.vx = 0;
            this.vy = 0;
            if(random() < 0.5) {
                this.vx = random() < 0.5 ? -this.speed : this.speed;
            }
            else {
                this.vy = random() < 0.5 ? -this.speed : this.speed;
            }
        };
        this.resetDirection();
        this.update = function() {
            this.x+= this.vx;
            this.y+= this.vy;

            for(var i = 0; i < game.blocks.length; i++) {
                if(game.collision(this, game.blocks[i])) {
                    if(this.x < game.blocks[i].x + game.blocks[i].w && this.x > game.blocks[i].x) {
                        this.x = game.blocks[i].x  + game.blocks[i].w;
                    }
                    else if(this.x + this.w > game.blocks[i].x && this.x < game.blocks[i].x) {
                        this.x = game.blocks[i].x - this.w;
                    }
                    if(this.y < game.blocks[i].y + game.blocks[i].h && this.y > game.blocks[i].y) {
                        this.y = game.blocks[i].y + game.blocks[i].h;
                    }
                    else if(this.y + this.h > game.blocks[i].y && this.y < game.blocks[i].y) {
                        this.y = game.blocks[i].y - this.h;
                    }
                    this.resetDirection();
                    break;
                }
            }
            if(this.x < 0 || this.x + this.w > game.gridWidth || this.y < 0 || this.y + this.h > game.gridHeight)
            {
                if(this.x < 0 || this.x + this.w > game.gridWidth) {
                    this.vx*= -1;
                }
                else {
                    this.vy*= -1;
                }
            }
        };
        this.draw = function() {
            image(game.themes[game.level].blockImage, this.x, this.y, this.w, this.h);
        };
        this.run = function() {
            this.update();
            this.draw();
        };
    };
    var Food = function(config) {
        this.used = false;
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.w = config.w;
        this.h = config.h;
        this.backColor = config.backColor || color(232, 96, 42);

        this.draw = function() {
            fill(this.backColor);
            noStroke();
            rect(this.x, this.y, this.w, this.h, 7);
        };
        this.run = function() {
            this.draw();  
        };
    };
    var Special = function(config) {
        this.x = config.x || 0;
        this.y = config.y || 0;
        this.w = config.w;
        this.h = config.h;
        this.active = config.active || false;
        this.timer = 0;

        this.update = function() {
            if(this.timer-- <= 0) {
                this.active = false;
                this.timer = 0;
            }
        };
        this.draw = function() {
            noStroke();
            fill(game.themes[game.level].colors.textColor);
            rect(this.x, this.y, this.w, this.h);
        };
        this.run = function() {
            if(this.active) {
                this.update();
                this.draw();
            }
        };
    };
    var Transition = function() {
        this.y = 0;
        this.vy = 20;
        this.pageTo = "";
        this.active = false;

        this.reset = function() {
            this.active = false;
            this.y = 0;
        };
        this.start = function(page) {
            this.active = true;
            this.pageTo = page;
        };
        this.update = function() {
            this.y += this.vy;

            if(this.y === height) {
                game.page = this.pageTo;
                game.reset();
            }
            else if(this.y === height * 2) {
                this.reset();
            }
        };
        this.draw = function() {
            if(this.active) {
                noStroke();

                for(var i = 1; i <= 10; i++) {
                    fill(game.snake.colors[game.snake.snakeColor][i % 3]);
                    rect(0, -(60 * i) + this.y, 300, 60);

                    rect(300, height + (60 * i) - this.y, 300, 60);
                }
                fill(255);
                ellipse(50, -40 + this.y, 120, 120);
                ellipse(250, -40 + this.y, 120, 120);
                ellipse(350, 680 - this.y, 120, 120);
                ellipse(550, 680 - this.y, 120, 120);
                fill(0);
                ellipse(50, -20 + this.y, 20, 20);
                ellipse(250, -20 + this.y, 20, 20);
                ellipse(350, 660 - this.y, 20, 20);
                ellipse(550, 660 - this.y, 20, 20);
            }
        };
        this.run = function() {
            this.update();
            this.draw();
        };
    };
    var Game = function(config) {
        this.page = "home";
        this.level = 0;
        this.levels = levels;
        this.blockSize = 24;
        this.blockPixelAmount = 6;
        this.grid = [];
        this.gridWidth = 0;
        this.gridHeight = 0;
        this.timer = 0;
        this.shake = 0;
        this.shakedown = 0.1;
        this.endTimer = 0;
        this.endDuration = 60;

        this.special = new Special({
            w: this.blockSize,
            h: this.blockSize
        });
        this.specialType = 0;
        this.specialTimer = 0;
        this.specialFrequency = 600;
        this.specialTypes = [
            "Invincible",
            "Shrink",
            "Double points"
        ];

        this.themes = [
            {
                title: "Home",
                colors: {
                    backColor: color(239, 225, 186),
                    textColor: color(241, 60, 31),
                    blockColor: color(215, 153, 34),
                    foodColor: color(241, 60, 31)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //home
            {
                title: "Natural & Earthy",
                colors: {
                    backColor: color(101, 158, 188),
                    textColor: color(251, 238, 193),
                    blockColor: color(218, 173, 134),
                    foodColor: color(251, 238, 193)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //natural and earthy
            {
                title: "Contemporary & Bold",
                colors: {
                    backColor: color(26, 26, 28),
                    textColor: color(255, 255, 255, 200),
                    blockColor: color(195, 8, 63),
                    foodColor: color(255, 255, 255, 200)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //contemporary and bold
            {
                title: "Artsy & Creative",
                colors: {
                    backColor: color(239, 225, 186),
                    textColor: color(241, 60, 31),
                    blockColor: color(215, 153, 34),
                    foodColor: color(241, 60, 31)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //artsy and creative
            {
                title: "Elegant yet Approachable",
                colors: {
                    backColor: color(237, 200, 184),
                    textColor: color(18, 61, 106),
                    blockColor: color(171, 59, 97),
                    foodColor: color(18, 61, 106)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //elegant yet approachable
            {
                title: "Sleek and Futuristic",
                colors: {
                    backColor: color(16, 100, 102),
                    textColor: color(210, 233, 227),
                    blockColor: color(255, 203, 155),
                    foodColor: color(210, 233, 227)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //sleek and futuristic
            {
                title: "Natural & Earthy",
                colors: {
                    backColor: color(101, 158, 188),
                    textColor: color(251, 238, 193),
                    blockColor: color(218, 173, 134),
                    foodColor: color(251, 238, 193)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //natural and earthy
            {
                title: "Contemporary & Bold",
                colors: {
                    backColor: color(26, 26, 28),
                    textColor: color(255, 255, 255, 200),
                    blockColor: color(195, 8, 63),
                    foodColor: color(255, 255, 255, 200)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //contemporary and bold
            {
                title: "Artsy & Creative",
                colors: {
                    backColor: color(239, 225, 186),
                    textColor: color(241, 60, 31),
                    blockColor: color(215, 153, 34),
                    foodColor: color(241, 60, 31)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //artsy and creative
            {
                title: "Elegant yet Approachable",
                colors: {
                    backColor: color(237, 200, 184),
                    textColor: color(18, 61, 106),
                    blockColor: color(171, 59, 97),
                    foodColor: color(18, 61, 106)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //elegant yet approachable
            {
                title: "Sleek and Futuristic",
                colors: {
                    backColor: color(16, 100, 102),
                    textColor: color(210, 233, 227),
                    blockColor: color(255, 203, 155),
                    foodColor: color(210, 233, 227)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //sleek and futuristic
            {
                title: "Minimal yet Warm",
                colors: {
                    backColor: color(234, 232, 220),
                    textColor: color(232, 90, 80),
                    blockColor: color(216, 195, 164),
                    foodColor: color(232, 90, 80)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //minimal yet warm
            {
                title: "Blue & Refreshing",
                colors: {
                    backColor: color(41, 101, 138),
                    textColor: color(168, 171, 184),
                    blockColor: color(45, 166, 202),
                    foodColor: color(168, 171, 184)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //blue and refreshing
            {
                title: "Cheerful & Energetic",
                colors: {
                    backColor: color(251, 232, 166),
                    textColor: color(48, 60, 108),
                    blockColor: color(244, 151, 108),
                    foodColor: color(48, 60, 108)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //cheerful and energetic
            {
                title: "Lively yet Soothing",
                colors: {
                    backColor: color(251, 225, 128),
                    textColor: color(1, 102, 112),
                    blockColor: color(159, 237, 215),
                    foodColor: color(1, 102, 112)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }, //lively yet soothing
            {
                title: "Modern & Minimalist",
                colors: {
                    backColor: color(25, 25, 27),
                    textColor: color(207, 188, 129),
                    blockColor: color(71, 152, 96),
                    foodColor: color(207, 188, 129)
                },
                blockImage: undefined,
                lazerImage: undefined,
                grassImage: undefined
            }  //modern and minimalist
        ];

        this.score = 0;
        this.scoreTotal = 0;
        this.scoreBest = 0;

        this.message = "";
        this.messages = {
                cannibal: [ //Cannibal messages
                    "You just ate yourself, eewwww",
                    "You're not that hungry that you had to eat yourself",
                    "I think you should have eaten something before you played",
                    "You won't shred any skin by eating yourself",
                    "You might want to try some take-out :)",
                    "So how did you taste :p"
                ],
                boundary: [ //Boundary messages
                    "Watch out for those boundaries",
                    "So, where do you think you were trying to go",
                    "Um, I don't think that was supposed to happen",
                    "Ouch, I bet that hurt your noggen",
                    "Mmm, I think there's a wall there",
                    "Are you sure you had your eyes open?"
                ],
                lazer: [ //Lazer messages
                    "You do know what a lazer is right :/",
                    "Watch out for those lazers next time",
                    "I bet you got a buzz out of that ey",
                    "One way to charge your battery :p",
                    "Mmm, what's that buzzing sound?",
                    "You might want to watch out next time"
                ],
                block: [ //Block messages
                    "Um, you do realise those blocks are solid right",
                    "Snake vs. block... and the winner is - not the snake!!",
                    "You're not invincible all the time :)",
                    "You might want to try going around next time",
                    "Those two big goggly eyes and still didn't see it ey :p",
                    "Now that must have hurt your noggin"
                ]
        };

        this.sound = false;
        // this.sounds = {
        //     lazer: getSound("retro/laser1"),
        //     crash: getSound("retro/boom1"),
        //     shred: getSound("rpg/battle-swing"),
        //     eat: getSound("retro/hit1"),
        //     block: getSound("retro/hit2")
        // };
        // this.sounds.eat.audio.playbackRate = 10;
        // this.sounds.block.audio.playbackRate = 10;

        this.snake = new Snake({
            x: 0,
            y: 0,
            size: this.blockSize,
            snakeColor: 0
        });
        this.snakeHow = new Snake({
            x: 325,
            y: 520,
            size: this.blockSize,
            snakeColor: 0
        });

        this.transition = new Transition();

        this.blobs = [];

        this.foodsRepository = [];
        this.foods = [];

        this.botsRepository = [];
        this.bots = [];

        this.lazersRepository = [];
        this.lazers = [];

        this.blocksRepository = [];
        this.blocks = [];

        this.explosionsRepository = [];
        this.explosions = [];

        this.screenImage = undefined;

        this.buttons = {
            start: new Button({
                x: width * 0.5,
                y: height * 0.65,
                content: "Play",
                page: "start"
            }),
            replay: new Button({
                x: width * 0.5,
                y: height * 0.75,
                size: 120,
                content: "Replay",
                page: "replay"
            }),
            play: new Button({
                x: width * 0.5,
                y: height * 0.65,
                content: "Play",
                page: "play"
            }),
            next: new Button({
                x: width * 0.5,
                y: height * 0.65,
                content: "Play",
                page: "next"
            }),
            how: new Button({
                x: width * 0.85,
                y: height * 0.85,
                size: 100,
                content: "How",
                page: "how"
            }),
            sound: new Button({
                x: width * 0.15,
                y: height * 0.85,
                size: 100,
                content: "Sound",
                page: "home"
            }),
            home: new Button({
                x: width * 0.9,
                y: height * 0.9,
                size: 70,
                content: "Back",
                page: "home"
            })
        };
        this.snakeButtons = {
            red: new SnakeButton({
                x: 120-75,
                y: 220,
                w: 100,
                h: 24,
                index: 0
            }),
            green: new SnakeButton({
                x: 255-75,
                y: 220,
                w: 100,
                h: 24,
                index: 1
            }),
            blue: new SnakeButton({
                x: 390-75,
                y: 220,
                w: 100,
                h: 24,
                index: 2
            }),
            pink: new SnakeButton({
                x: 525-75,
                y: 220,
                w: 100,
                h: 24,
                index: 3
            })
        };

        this.cam = {
            x: 0,
            y: 0
        };

        this.setup = function() {
            //initialize blobs (grass)
            for(var i = 0; i < 50; i++) {
                this.blobs.push({
                    x: 0,
                    y: 0,
                    w: this.blockSize,
                    h: this.blockSize
                });
            }

            //initialize block/grass images for each theme
            var bitSize = this.blockSize / this.blockPixelAmount;
            for(var i = 0; i < this.themes.length; i++) {
                background(0, 0, 0, 0);
                noStroke();

                for(var col = 0; col < this.blockPixelAmount; col++) {
                    for(var row = 0; row < this.blockPixelAmount; row++) {
                        fill(random() < 0.75 ? this.themes[i].colors.blockColor : random() < 0.75 ? this.themes[i].colors.foodColor : this.themes[i].colors.backColor);
                        rect(col * bitSize, row * bitSize, bitSize, bitSize);
                    }
                }
                this.themes[i].blockImage = get(0, 0, this.blockSize, this.blockSize);

                background(0, 0, 0, 0);
                noStroke();

                for(var col = 0; col < this.blockPixelAmount; col++) {
                    for(var row = 0; row < this.blockPixelAmount; row++) {
                        fill(random() < 0.75 ? this.themes[i].colors.foodColor : random() < 0.75 ? this.themes[i].colors.backColor : this.themes[i].colors.blockColor);
                        rect(col * bitSize, row * bitSize, bitSize, bitSize);
                    }
                }
                this.themes[i].lazerImage = get(0, 0, this.blockSize, this.blockSize);

                background(0, 0, 0, 0);
                pushStyle();
                    noFill();
                    stroke(this.themes[i].colors.foodColor, 100);
                    strokeWeight(3);
                    arc(-11, 16, 30, 30, -20, 0);
                    arc(-11 + 40, 16, 30, 20, 180, 220);
                    arc(-11 + 40, 16, 40, 50, 180, 210);
                popStyle();
                this.themes[i].grassImage = get(0, 0, 20, 20);
            }

            //initialize blocks for reuse
            for(var i = 0; i < 250; i++) {
                this.blocksRepository.push(new Block({
                    w: this.blockSize,
                    h: this.blockSize
                }));
            }

            //initialize bots/lazers for reuse
            for(var i = 0; i < 10; i++) {
                this.botsRepository.push(new Bot({
                    w: this.blockSize,
                    h: this.blockSize
                }));
            }

            //initialize lazers for reuse
            for(var i = 0; i < 10; i++) {
                this.lazersRepository.push(new Lazer({
                    w: this.blockSize,
                    h: this.blockSize
                }));
            }

            //initialize foods for reuse
            for(var i = 0; i < 150; i++) {
                this.foodsRepository.push(new Food({
                    w: this.blockSize * 0.5,
                    h: this.blockSize * 0.5
                }));
            }

            //initialize explosions for reuse
            for(var i = 0; i < 100; i++) {
                this.explosionsRepository.push(new Explosion({}));
            }
        };
        this.setup();
        this.getBlock = function(config) {
            for(var i = 0; i < this.blocksRepository.length; i++) {
                if(this.blocksRepository[i].used === false) {
                    this.blocksRepository[i].x = config.x;
                    this.blocksRepository[i].y = config.y;
                    this.blocksRepository[i].w = config.w || this.blockSize;
                    this.blocksRepository[i].h = config.h || this.blockSize;
                    this.blocksRepository[i].backColor = config.backColor;
                    this.blocksRepository[i].used = true;
                    return this.blocksRepository[i];
                }
            }

            //if no block found in the repository then return a new block object
            var b = new Block({
                used: true,
                x: config.x,
                y: config.y,
                w: config.w || this.blockSize,
                h: config.h || this.blockSize,
                backColor: config.backColor
            });

            this.blocksRepository.push(b);
            return b;
        };
        this.getBot = function(config) {
            for(var i = 0; i < this.botsRepository.length; i++) {
                if(this.botsRepository[i].used === false) {
                    this.botsRepository[i].x = config.x;
                    this.botsRepository[i].y = config.y;
                    this.botsRepository[i].w = config.w || this.blockSize;
                    this.botsRepository[i].h = config.h || this.blockSize;
                    this.botsRepository[i].backColor = config.backColor;
                    this.botsRepository[i].used = true;
                    return this.botsRepository[i];
                }
            }

            //if no bot found in the repository then return a new bot object
            var b = new Bot({
                used: true,
                x: config.x,
                y: config.y,
                w: config.w || this.blockSize,
                h: config.h || this.blockSize,
                backColor: config.backColor
            });

            this.botsRepository.push(b);
            return b;
        };
        this.getLazer = function(config) {
            for(var i = 0; i < this.lazersRepository.length; i++) {
                if(this.lazersRepository[i].used === false) {
                    this.lazersRepository[i].x = config.x;
                    this.lazersRepository[i].y = config.y;
                    this.lazersRepository[i].w = config.w || this.blockSize;
                    this.lazersRepository[i].h = config.h || this.blockSize;
                    this.lazersRepository[i].backColor = config.backColor;
                    this.lazersRepository[i].type = config.type;
                    this.lazersRepository[i].init();
                    this.lazersRepository[i].used = true;
                    return this.lazersRepository[i];
                }
            }

            //if no lazer found in the repository then return a new lazer object
            var z = new Lazer({
                used: true,
                x: config.x,
                y: config.y,
                w: config.w || this.blockSize,
                h: config.h || this.blockSize,
                backColor: config.backColor,
                type: config.type
            });
            z.init();

            this.lazersRepository.push(z);
            return z;
        };
        this.getFood = function(config) {
            for(var i = 0; i < this.foodsRepository.length; i++) {
                if(this.foodsRepository[i].used === false) {
                    this.foodsRepository[i].x = config.x;
                    this.foodsRepository[i].y = config.y;
                    this.foodsRepository[i].w = config.w || this.blockSize * 0.5;
                    this.foodsRepository[i].h = config.h || this.blockSize * 0.5;
                    this.foodsRepository[i].backColor = config.backColor;
                    this.foodsRepository[i].used = true;
                    return this.foodsRepository[i];
                }
            }

            //if no block found in the repository then return a new block object
            var f = new Food({
                used: true,
                x: config.x,
                y: config.y,
                w: config.w || this.blockSize * 0.5,
                h: config.h || this.blockSize * 0.5,
                backColor: config.backColor
            });

            this.foodsRepository.push(f);
            return f;
        };
        this.setLevelGrid = function() {
            //get the current game level grid
            this.grid = this.levels[this.level].grid;
            this.gridWidth = this.grid[0].length * this.blockSize;
            this.gridHeight = this.grid.length * this.blockSize;

            this.cam.x = 0;
            this.cam.y = this.gridHeight;

            //get the sprites and create/store appropriately
            for(var row = 0; row < this.grid.length; row++) {
                for(var col = 0; col < this.grid[row].length; col++) {
                    if(this.grid[row][col] === "-") {
                        continue;
                    }
                    else if(this.grid[row][col] === "P") { //player/snake
                        this.snake.x = col * this.blockSize;
                        this.snake.y = row * this.blockSize;
                        this.snake.spawn.x = this.snake.x;
                        this.snake.spawn.y = this.snake.y;
                        this.snake.init();
                    }
                    else if(this.grid[row][col] === "B") { //block
                        this.blocks.push(this.getBlock({
                            x: col * this.blockSize,
                            y: row * this.blockSize,
                            w: this.blockSize,
                            h: this.blockSize,
                            backColor: this.themes[this.level].colors.blockColor
                        }));
                    }
                    else if(this.grid[row][col] === "E") { //bot (enemy)
                        this.bots.push(this.getBot({
                            x: col * this.blockSize,
                            y: row * this.blockSize,
                            w: this.blockSize,
                            h: this.blockSize,
                            backColor: this.themes[this.level].colors.blockColor
                        }));
                    }
                    else if(this.grid[row][col] === "F") { //food
                        this.foods.push(this.getFood({
                            x: col * this.blockSize + this.blockSize * 0.25,
                            y: row * this.blockSize + this.blockSize * 0.25,
                            w: this.blockSize * 0.5,
                            h: this.blockSize * 0.5,
                            backColor: this.themes[this.level].colors.foodColor
                        }));
                    }
                    else if(this.grid[row][col] === "H" || this.grid[row][col] === "V") { //lazer
                        this.lazers.push(this.getLazer({ //lazer
                            x: col * this.blockSize,
                            y: row * this.blockSize,
                            w: this.blockSize,
                            h: this.blockSize,
                            backColor: this.themes[this.level].colors.blockColor,
                            type: this.grid[row][col]
                        }));
                    }
                }
            }
        };
        this.resetButtons = function() {
            for (var key in this.buttons) {
                if(this.page === "home") {
                    this.buttons[key].backColor = this.themes[0].colors.backColor;
                    this.buttons[key].backColorHover = this.themes[0].colors.backColor;
                    this.buttons[key].textColor = this.themes[0].colors.textColor;
                    this.buttons[key].textColorHover = this.themes[0].colors.textColor;
                    this.buttons[key].borderColor = this.themes[0].colors.textColor;
                }
                else {
                    this.buttons[key].backColor = this.themes[this.level].colors.backColor;
                    this.buttons[key].backColorHover = this.themes[this.level].colors.backColor;
                    this.buttons[key].textColor = this.themes[this.level].colors.textColor;
                    this.buttons[key].textColorHover = this.themes[this.level].colors.textColor;
                    this.buttons[key].borderColor = this.themes[this.level].colors.textColor;
                }
            }
        };
        this.resetBlobs = function() {
            for(var i = 0; i < this.blobs.length; i++) {
                this.blobs[i].x = random(0, this.gridWidth);
                this.blobs[i].y = random(0, this.gridHeight);
            }
        };
        this.resetBlobs();
        this.init = function() {
            this.blocks.length = 0;
            this.bots.length = 0;
            this.lazers.length = 0;
            this.foods.length = 0;
            this.explosions.length = 0;
            this.endTimer = 0;
            this.shake = 0;

            for(var i = 0; i < this.blocksRepository.length; i++) {
                this.blocksRepository[i].used = false;
            }
            for(var i = 0; i < this.botsRepository.length; i++) {
                this.botsRepository[i].used = false;
            }
            for(var i = 0; i < this.foodsRepository.length; i++) {
                this.foodsRepository[i].used = false;
            }
            for(var i = 0; i < this.explosionsRepository.length; i++) {
                this.explosionsRepository[i].used = false;
            }

            this.special.active = false;
            this.specialTimer = 0;

            this.setLevelGrid();

            this.resetBlobs();

            this.snake.init();
            this.snakeHow.init();

            this.resetButtons();
        };
        this.init();
        this.reset = function () {
            switch (this.page) {
                case "home":
                    this.level = 0;
                    this.init();
                    break;
                case "how":
                    this.level = 0;
                    break;
                case "start":
                    this.level = saveCode[0] || 1;
                    this.score = 0;
                    this.scoreTotal = saveCode[1] || 0;
                    this.scoreBest = saveCode[2] || 0;
                    this.init();
                    this.page = "play";
                    break;
                case "play":
                case "replay":
                    this.score = 0;
                    this.init();
                    this.page = "play";
                    break;
                case "next":
                    this.score = 0;
                    this.level++;
                    this.init();
                    this.page = "play";
                    break;
                default:
                    this.init();
                    break;
            }
        };
        this.collision = function(obj1, obj2) {
            if(obj1.x + obj1.w > obj2.x && obj1.y + obj1.h > obj2.y && obj1.x < obj2.x + obj2.w && obj1.y < obj2.y + obj2.h) {
                return true;
            }
            return false;
        };
        this.getExplosion = function(config) {
            for(var i = 0; i < this.explosionsRepository.length; i++) {
                if(this.explosionsRepository[i].used === false) {
                    this.explosionsRepository[i].x = config.x;
                    this.explosionsRepository[i].y = config.y;
                    this.explosionsRepository[i].size = config.size || 15;
                    this.explosionsRepository[i].backColor = config.backColor;
                    this.explosionsRepository[i].cornerRadius = config.cornerRadius || 0;
                    this.explosionsRepository[i].timeToLive = 255;
                    this.explosionsRepository[i].used = true;
                    return this.explosionsRepository[i];
                }
            }

            //if no block found in the repository then return a new block object
            var ex = new Explosion({
                used: true,
                x: config.x,
                y: config.y,
                size: config.size || 15,
                backColor: config.backColor,
                cornerRadius: config.cornerRadius || 0,
                timeToLive: 255
            });

            this.explosionsRepository.push(ex);
            return ex;
        };
        this.runExplosions = function() {
            //run through each used explosion and display it
            for(var i = this.explosions.length - 1; i >= 0; i--) {
                if(this.explosions[i].used) {
                    this.explosions[i].run();

                    if(this.explosions[i].used === false) {
                        this.explosions.splice(i, 1);
                    }
                }
            }
        };
        this.activateSpecial = function() {
            this.special.active = true;
            //this.special.timer = floor(random(240, 480));
            this.special.timer = ~~(random(240, 480));

            var taken = true;
            while(taken) {
                taken = false;
                //this.special.x = floor(random(this.gridWidth / this.blockSize)) * this.blockSize;
                //this.special.y = floor(random(this.gridHeight / this.blockSize)) * this.blockSize;
                this.special.x = ~~(random(this.gridWidth / this.blockSize)) * this.blockSize;
                this.special.y = ~~(random(this.gridHeight / this.blockSize)) * this.blockSize;

                for(var i = 0; i < this.blocks.length; i++) {
                    if(this.collision(this.special, this.blocks[i])) {
                        taken = true;
                        break;
                    }
                }
            }
        };
        this.runSpecial = function() {
            this.special.run();

            if(this.special.active) {
                if(this.collision(this.snake.segments[0], this.special)) {
                    this.special.active = false;
                    this.special.timer = 0;
                    this.shake = 25;
                    if(this.sound){
                        if(this.sounds.block.audio.currentTime === 0 || this.sounds.block.audio.currentTime >= this.sounds.block.audio.duration) {
                            playSound(this.sounds.block);
                        }

                    }
                    //this.specialType = floor(random(3)); //0 = invincible, 1 = shrink, 2 = double points
                    this.specialType = ~~(random(3)); //0 = invincible, 1 = shrink, 2 = double points
                    switch(this.specialType) {
                        case 0: //invincible
                            this.specialTimer = 600; //10 seconds
                            break;
                        case 1: //shrink
                            this.specialTimer = 300; //5 seconds
                            break;
                        case 2: //double points
                            this.specialTimer = 600; //10 seconds
                            break;
                    }
                }
            }

            if(this.specialTimer > 0 && this.specialType === 1) {
                if(frameCount % 10 === 0) {
                    if(this.snake.segments.length > 16) {
                        var ex;
                        for(var n = 0; n < 10; n++) {
                            ex = this.getExplosion(
                                {
                                    x: this.snake.segments[this.snake.segments.length - 1].x, 
                                    y: this.snake.segments[this.snake.segments.length - 1].y, 
                                    //backColor: this.snake.colors[this.snake.snakeColor][floor(random(3))],
                                    backColor: this.snake.colors[this.snake.snakeColor][~~(random(3))],
                                    size: 10,
                                    cornerRadius: 10
                                });
                            if(ex) {
                                this.explosions.push(ex);
                            }
                        }
                        if(this.sound){playSound(this.sounds.shred);}
                        this.shake = 5;
                        this.snake.segments[this.snake.segments.length - 1].used = false;
                        this.snake.segments.pop();
                    }
                }
            }
        };
        this.shakeScreen = function() {
            if(this.shake > 0) {
                this.shake = lerp(this.shake, 0, this.shakedown);
                translate(round(random(-this.shake, this.shake)), round(random(-this.shake, this.shake)));
            }
        };
        this.gameScene = function() {
            fill(this.themes[this.level].colors.backColor);
            rect(0, 0, this.gridWidth, this.gridHeight);

            pushStyle();
                textAlign(CENTER, CENTER);
                textSize(80);
                fill(this.themes[this.level].colors.textColor, 50);
                //text(this.themes[this.level].title, this.gridWidth * 0.5, this.gridHeight * 0.5);
                text("LEVEL " + this.level, this.gridWidth * 0.5, this.gridHeight * 0.5);
            popStyle();

            for(var i = 0; i < this.blobs.length; i++)
            {
                image(this.themes[this.level].grassImage, this.blobs[i].x, this.blobs[i].y);
            }
        };
        this.gameStats = function() {
            textSize(24);
            fill(this.themes[this.level].colors.textColor, 200);

            pushStyle();
                textAlign(LEFT);
                text("Level: " + this.level, 20, 35);
            popStyle();

            pushStyle();
                textAlign(RIGHT);
                text("Score: " + (this.scoreTotal + this.score), width - 20, 35);
            popStyle();

            if(this.specialTimer-- > 0) {
                pushStyle();
                    textAlign(CENTER);
                    text(this.specialTypes[this.specialType] + "\n" + ceil(this.specialTimer/60), 300, 35);
                popStyle();
            }
        };
        this.checkCollision = function(){
            var head = this.snake.segments[0];

            //Check if went out of bounds
            if(head.x < 0 || head.x + head.size > this.gridWidth || head.y < 0 || head.y + head.size > this.gridHeight) {
                this.snake.alive = false;
                this.message = this.messages.boundary[~~(random(this.messages.boundary.length))];
                var ex;
                for(var n = 0; n < 10; n++) {
                    ex = this.getExplosion(
                        {
                            x: this.snake.segments[0].x, 
                            y: this.snake.segments[0].y, 
                            backColor: this.snake.colors[this.snake.snakeColor][2],
                            size: 10,
                            cornerRadius: 10
                        });
                    if(ex) {
                        this.explosions.push(ex);
                    }
                }
                this.shake = 25;
                if(this.sound){
                    this.sounds.crash.audio.play();
                }
            }

            //Check to see if the snakes head hits a block
            for(var i = this.blocks.length - 1; i >= 0; i--) {
                if(this.collision(this.blocks[i], head)) {
                    if(this.specialTimer > 0 && this.specialType === 0) { //Invincible
                        var ex;
                        for(var n = 0; n < 10; n++) {
                            ex = this.getExplosion(
                                {
                                    x: this.blocks[i].x, 
                                    y: this.blocks[i].y,
                                    size: 10,
                                    backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                });
                            if(ex) {
                                this.explosions.push(ex);
                            }
                        }
                        this.shake = 25;
                        if(this.sound){
                            this.sounds.block.audio.play();
                        }
                        this.blocks[i].used = false;
                        this.blocks.splice(i, 1);
                    }
                    else {
                        this.snake.alive = false;
                        this.message = this.messages.block[~~(random(this.messages.block.length))];
                        var ex;
                        for(var n = 0; n < 5; n++) {
                            ex = this.getExplosion(
                                {
                                    x: this.blocks[i].x, 
                                    y: this.blocks[i].y,
                                    size: 10,
                                    backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                });
                            if(ex) {
                                this.explosions.push(ex);
                            }
                        }
                        this.shake = 25;
                        if(this.sound){
                            this.sounds.crash.audio.play();
                        }
                    }
                }
            }

            //Check to see if the snakes head hits a bot
            for(var i = this.bots.length - 1; i >= 0; i--) {
                if(this.collision(this.bots[i], head)) {
                    if(this.specialTimer > 0 && this.specialType === 0) { //Invincible
                        var ex;
                        for(var n = 0; n < 10; n++) {
                            ex = this.getExplosion(
                                {
                                    x: this.bots[i].x, 
                                    y: this.bots[i].y,
                                    size: 10,
                                    backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                });
                            if(ex) {
                                this.explosions.push(ex);
                            }
                        }
                        this.shake = 25;
                        this.bots[i].used = false;
                        this.bots.splice(i, 1);
                        if(this.sound){
                            this.sounds.block.audio.play();
                        }
                    }
                    else {
                        this.snake.alive = false;
                        //this.message = this.messages.block[floor(random(this.messages.block.length))];
                        this.message = this.messages.block[~~(random(this.messages.block.length))];
                        var ex;
                        for(var n = 0; n < 5; n++) {
                            ex = this.getExplosion(
                                {
                                    x: this.bots[i].x, 
                                    y: this.bots[i].y,
                                    size: 10,
                                    backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                });
                            if(ex) {
                                this.explosions.push(ex);
                            }
                        }
                        this.shake = 25;
                        if(this.sound){
                            this.sounds.block.audio.play();
                        }
                    }
                }
            }

            //check to see if the snake gets hit by a lazer
            for(var i = this.lazers.length - 1; i >= 0; i--) {
                for(var j = 0; j < this.snake.segments.length; j++) {
                    if( (this.lazers[i].on && this.collision(this.snake.segments[j], this.lazers[i].beam)) ||
                        this.collision(this.snake.segments[j], this.lazers[i]) ||
                        this.collision(this.snake.segments[j], this.lazers[i].end)) {

                        if(this.specialTimer > 0 && this.specialType === 0) { //Invincible
                            var ex;
                            for(var n = 0; n < 10; n++) {
                                ex = this.getExplosion(
                                    {
                                        x: this.lazers[i].x, 
                                        y: this.lazers[i].y,
                                        size: 10,
                                        backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                    });
                                if(ex) {
                                    this.explosions.push(ex);
                                }
                            }
                            this.shake = 25;
                            this.lazers[i].used = false;
                            this.lazers.splice(i, 1);
                            if(this.sound){
                                this.sounds.block.audio.play();
                            }
                        }
                        else {
                            this.snake.alive = false;
                            this.message = this.messages.lazer[~~(random(this.messages.lazer.length))];
                            var ex;
                            for(var n = 0; n < 5; n++) {
                                ex = this.getExplosion(
                                    {
                                        x: this.lazers[i].x, 
                                        y: this.lazers[i].y,
                                        size: 10,
                                        backColor: random() < 0.5 ? this.themes[this.level].colors.foodColor : this.themes[this.level].colors.backColor
                                    });
                                if(ex) {
                                    this.explosions.push(ex);
                                }
                            }
                            this.shake = 25;
                            if(this.sound){
                                this.sounds.lazer.audio.play();
                            }
                        }

                        break;
                    }
                }
            }
        };
        this.checkCannibal = function(){
            //check if eaten itself
            var head = this.snake.segments[0];

            for(var i = 10; i < this.snake.segments.length; i++)
            {
                var p = this.snake.segments[i];

                var dx = head.x - p.x;
                var dy = head.y - p.y;
                var distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < this.snake.size / 2 + this.snake.size / 2) {
                    this.snake.alive = false;
                    this.message = this.messages.cannibal[~~(random(this.messages.cannibal.length))];
                    break;
                }
            }
        };
        this.checkEat = function(){
            //check if eaten some food
            var head = this.snake.segments[0];

            for(var i = 0; i < this.foods.length; i++)
            {
                if(this.collision(this.foods[i], head)) {
                    var ex;
                    for(var n = 0; n < 5; n++) {
                        ex = this.getExplosion(
                            {
                                x: this.foods[i].x, 
                                y: this.foods[i].y,
                                size: 5,
                                backColor: this.themes[this.level].colors.foodColor,
                                cornerRadius: 10
                            });
                        if(ex) {
                            this.explosions.push(ex);
                        }
                    }
                    if(this.sound){
                        this.sounds.eat.audio.play();
                    }
                    this.foods[i].used = false;
                    this.shake = 5;
                    this.foods.splice(i, 1);
                    this.snake.addSegment = true;
                    if(this.specialTimer > 0 && this.specialType === 2) { //Double points
                        this.score+= 20;
                    }
                    else {
                        this.score+= 10;
                    }
                }
            }
        };
        this.move = function(arr) {
            for(var i = 0; i < arr.length; i++) {
                var block = arr[i];

                if(this.collision(this.player, block)) {
                    if(this.player.px + this.player.w <= block.x){
                        this.player.x = block.x - this.player.w;
                    }

                    if(this.player.py + this.player.h <= block.y){
                        this.player.y = block.y - this.player.h;
                    }    

                    if(this.player.px >= block.x + block.w){
                        this.player.x = block.x + block.w;
                    }   

                    if(this.player.py >= block.y + block.h){
                        this.player.y = block.y + block.h;
                    }    
                }
            }
        };
        this.run = function() {
            if(this.paused) {
                pushStyle();
                    noStroke();
                    image(this.screenImage, 0, 0, width, height);
                    rectMode(CENTER);
                    fill(40, 200);
                    rect(width/2, height/2, 300, 150);
                    textAlign(CENTER, CENTER);
                    textSize(40);
                    fill(240, 240, 240);
                    text("PAUSED", width/2, height*0.47);
                    textSize(20);
                    text("Press P to resume", width/2, height*0.55);
                    //text("Blocks: " + this.blocks.length + "\nFood: " + this.foods.length + "\nBots: " + this.bots.length, width / 2, height * 0.7);
                popStyle();
                return;
            }

            this.cam.x = lerp(this.cam.x, width / 2 - this.snake.segments[0].x, 0.1);
            this.cam.y = lerp(this.cam.y, height / 2 - this.snake.segments[0].y, 0.1);

            pushMatrix();
                translate(this.cam.x, this.cam.y);

                this.shakeScreen();

                this.gameScene();

                if(this.snake.alive && this.foods.length > 0) {
                    this.snake.run();
                }
                else {
                    this.snake.draw();
                }

                for(var i = 0; i < this.bots.length; i++) {
                    this.bots[i].run();
                }
                for(var i = 0; i < this.lazers.length; i++) {
                    this.lazers[i].run();
                }
                for(var i = 0; i < this.blocks.length; i++) {
                    this.blocks[i].run();
                }
                for(var i = 0; i < this.foods.length; i++) {
                    this.foods[i].run();
                }

                this.runSpecial();

                this.runExplosions();

                if(this.snake.alive) {
                    this.checkCollision();
                    this.checkCannibal();
                    this.checkEat();
                }

                if(!this.snake.alive && this.endTimer++ > this.endDuration) {
                    this.screenImage = get(0, 0, width, height);
                    this.page = "gameover";
                    this.endTimer = 0;

                    if(this.scoreTotal + this.score > this.scoreBest) {
                        this.scoreBest = this.scoreTotal + this.score;
                    }
                }
                else if(this.foods.length === 0 && this.endTimer++ > this.endDuration) {
                    this.screenImage = get(0, 0, width, height);

                    if(this.level + 1 === this.levels.length) {
                        this.page = "gamecomplete";
                    }
                    else {
                        this.page = "next";
                    }

                    this.scoreTotal+= this.score;
                    this.scoreBest = max(this.scoreTotal, this.scoreBest);
                    this.endTimer = 0;
                }
            popMatrix();

            if(!this.special.active && frameCount % this.specialFrequency) {
                this.activateSpecial();
            }

            this.gameStats();
        };
        this.homeScreen = function() {
            background(this.themes[0].colors.backColor);

            for(var i = 0; i < this.blobs.length / 5; i++)
            {
                image(this.themes[0].grassImage, this.blobs[i].x, this.blobs[i].y);
            }

            pushStyle();
                textAlign(CENTER);
                textSize(40);
                fill(40);
                text("Snake vs Blocks", width * 0.5, height * 0.2);
                textSize(24);
                text("Choose your snake", width * 0.5, height * 0.3);
                textSize(18);
                text("A game by Gray Wolf", width * 0.5, height * 0.97);
                textSize(14);
                pushMatrix();
                    translate(width * 0.85, height* 0.7);
                    rotate(radians(sin(this.timer * 3) * 5));
                    text("Make sure you read\nthe instructions :)", 0, 0);
                popMatrix();
            popStyle();

            this.snakeButtons.red.run();
            this.snakeButtons.blue.run();
            this.snakeButtons.green.run();
            this.snakeButtons.pink.run();

            this.buttons.start.draw();
            this.buttons.how.draw();
            //this.buttons.sound.draw();

            if(game.transition.active) {
                game.transition.run();
            }
        };
        this.howScreen = function() {
            background(this.themes[0].colors.backColor);

            this.snakeHow.draw();

            pushStyle();
                rectMode(CENTER);
                fill(240, 100);
                textAlign(CENTER);
                textSize(40);
                fill(0);
                text("How", width * 0.5, height * 0.1);
                textSize(16);
                text("Arrow/WASD keys to move the snake\n\nYou need to eat all the food to move to the next level (15 levels in total)\n\nWatch out for the blocks and lazers, and make sure you don't eat yourself\n\nThe plain block that randomly appears will award you special abilities of either:\n- Double points\n- Shread your skin (shrink)\n- Indestructable (against static/moving blocks and lazers)\n\nPress P to pause at any time\n\nPress V to toggle the sound on/off", width * 0.1, height * 0.15, width * 0.8, height);
                //text("Arrow/WASD keys to move the snake\n\nYou need to eat all the food to move to the next level (15 levels in total)\n\nWatch out for the blocks and lazers, and make sure you don't eat yourself\n\nThe plain block that randomly appears will award you special abilities of either:\n- Double points\n- Shread your skin (shrink)\n- Indestructable (against static/moving blocks and lazers)\n\nPress P to pause at any time\n\nPress V to toggle the sound on/off\n\nPress C to generate a save code so you can start back where you left off\n(level / score / best score)", width * 0.1, height * 0.15, width * 0.8, height);
            popStyle();

            this.buttons.home.draw();

            if(game.transition.active) {
                game.transition.run();
            }
        };
        this.nextScreen = function() {
            image(this.screenImage, 0, 0);
            pushStyle();
                rectMode(CENTER);
                fill(40, 200);
                rect(width * 0.5, height * 0.5, width * 0.8, height * 0.8);
                textAlign(CENTER);
                textSize(40);
                fill(240);
                text("Level " + this.level + " Complete", width * 0.5, height * 0.2);
                textSize(18);
                text("Current Score: " + (this.scoreTotal) + "\nBest Score: " + max(this.scoreBest, this.scoreTotal), width * 0.15, height * 0.25, width * 0.7, height);
            popStyle();

            this.buttons.next.draw();
        };
        this.overScreen = function() {
            image(this.screenImage, 0, 0);
            pushStyle();
                rectMode(CENTER);
                fill(40, 200);
                rect(width * 0.5, height * 0.5, width * 0.8, height * 0.8);
                textAlign(CENTER);
                textSize(40);
                fill(240);
                text("Whoops", width * 0.5, height * 0.2);
                textSize(18);
                text(this.message + "\n\nCurrent score: " + (this.score + this.scoreTotal) + "\nBest Score: " + this.scoreBest, width * 0.15, height * 0.25, width * 0.7, height);
            popStyle();

            this.buttons.replay.draw();
            this.buttons.home.draw();
        };
        this.completeScreen = function() {
            image(this.screenImage, 0, 0);
            pushStyle();
                rectMode(CENTER);
                fill(40, 200);
                rect(width * 0.5, height * 0.5, width * 0.8, height * 0.8);
                textAlign(CENTER);
                textSize(40);
                fill(240);
                text("Game Complete", width * 0.5, height * 0.2);
                textSize(18);
                text("Congratulations, you have completed all the levels.\n\nCurrent Score: " + this.scoreTotal + "\nBest Score: " + this.scoreBest, width * 0.15, height * 0.25, width * 0.7, height);
            popStyle();

            this.buttons.start.draw();
            this.buttons.home.draw();
        };
        this.checkKeyPressed = function() {
            if(keyPressed) {
                if (keyCode === 80) { //P - Pause
                    if(this.page === "play" || this.page === "replay") {
                        this.paused = !this.paused;
                        this.screenImage = get();
                    }
                    keyCode = 0;
                }
                else if(keyCode === 86) { //V - toggle sound
                    game.sound = !game.sound;
                    keyCode = 0;
                }
                else if(keyCode === 67) { //C - generate save code
                    var code = "var saveCode = [" + this.level + ", " + this.scoreTotal + ", " + this.scoreBest + "];";
                    //println("Copy and paste the below save code over the top of the existing one on line 49:\n\n" + code + "\n\nThis will allow you to continue at the last level you were on.\n\nTo reset the game just put the original save code back from line 48.");
                    keyCode = 0;
                }
            }
        };
    };
    
    game = new Game({});

    draw = function() {
        game.checkKeyPressed();
        background(game.themes[game.level].colors.blockColor);

        switch(game.page) {
            case "home":
                game.homeScreen();
                break;
            case "how":
                game.howScreen();
                break;
            case "play":
                game.run();
                break;
            case "next":
                game.nextScreen();
                break;
            case "gameover":
                game.overScreen();
                break;
            case "gamecomplete":
                game.completeScreen();
                break;
        }

        cursor(hover ? 'pointer' : 'default');    
        clicked = false;
        hover = false;
      
        game.timer+= 0.02;
    };
  }
}

var canvas = document.getElementById("canvas"); 
var processingInstance = new Processing(canvas, sketchProc);